//  Meeting.cpp
//  Agenda
//
//  Created by Yoshi Park 16/08/18.
//  Copyright  2016 Yoshi Park. All rights reserved.
//

include"Meeting.hpp"
/*std::string m_sponsor;
std::string m_participators;
Date m_startDate;
Date m_endDate;
std::string m_title;*/
// Meeting::Meeting() :m_sponsor(), m_participators(), m_startDate(), m_endDate(), m_title() { }
Meeting::Meeting(std::string t_sponsor, std::vector<std::string> t_participator, Date t_startTime,
    Date t_endTime, std::string t_title) : m_sponsor(t_sponsor), m_participators(t_participator), m_startDate(t_startTime), m_endDate(t_endTime), m_title(t_title) {}
Meeting::Meeting(const Meeting &t_meeting) {
    m_sponsor = t_meeting.m_sponsor;
    m_participators = t_meeting.m_participators;
    m_startDate = t_meeting.m_startDate;
    m_endDate = t_meeting.m_endDate;
    m_title = t_meeting.m_title;
}
std::string Meeting::getSponsor(void) const { return m_sponsor; }
void Meeting::setSponsor(std::string sponsor) { m_sponsor = sponsor; }
std::vector<std::string> Meeting::getParticipator(void) const { return m_participators; }
void Meeting::setParticipator(const std::vector<std::string> t_participators) { m_participators = t_participators; }
Date Meeting::getStartDate(void) const { return m_startDate; }
void Meeting::setStartDate(Date startTime) { m_startDate = startTime; }
Date Meeting::getEndDate(void) const { return m_endDate; }
void Meeting::setEndDate(Date endTime) { m_endDate = endTime; }
std::string Meeting::getTitle(void) const { return m_title; }
void Meeting::setTitle(std::string title) { m_title = title; }
bool Meeting::isParticipator(const std::string t_username) const {
    for (auto iter = m_participators.begin(); iter != m_participators.end(); ++iter) {
        if (*iter == t_username) return true;
    }
    return false;
}
