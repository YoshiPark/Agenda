//  Service.cpp
//  Agenda
//
//  Created by Yoshi Park 16/08/18.
//  Copyright  2016 Yoshi Park. All rights reserved.
//


#include"AgendaService.hpp"
#include<algorithm>
/*Storage *m_storage;*/
AgendaService::AgendaService(){ startAgenda(); }
AgendaService::AgendaService() {  }
bool AgendaService::userLogIn(std::string userName, std::string password) {
    std::function<bool(const User&)> filter = [userName](const User& user)->bool {
        return userName == user.getName();
    };
    auto user_list = m_storage->queryUser(filter);
    for (auto iter = user_list.begin(); iter != user_list.end(); ++iter) {
        if ((*iter).getPassword() == password) return true;
    }
    return false;
}
bool AgendaService::userRegister(std::string userName, std::string password,
    std::string email, std::string phone) {
    std::function<bool(const User&)> filter = [userName](const User& user)->bool {
        return userName == user.getName();
    };
    auto user_list = m_storage->queryUser(filter);
    if (!user_list.empty()) return false;
    m_storage->createUser(User(userName, password, email, phone));
    return true;
}
bool AgendaService::deleteUser(std::string userName, std::string password) {
    std::function<bool(const Meeting&)> meet_filter = [=](const Meeting& meeting)->bool {
        auto participator = meeting.getParticipator();
        auto iter = find(participator.begin(), participator.end(), userName);
        if (iter != participator.end() || userName == meeting.getSponsor()) return true;
        return false;
    };
    std::function<bool(const User&)> filter = [=](const User& user)->bool {
        if (userName == user.getName() && password == user.getPassword()) {
            m_storage->deleteMeeting(meet_filter);
            return true;
        }
        return false;
    };
    auto num = m_storage->deleteUser(filter);
    return num != 0;
}
// a user can only delete itself
std::list<User> AgendaService::listAllUsers(void) const {
    std::function<bool(const User&)> filter = [](const User& user)->bool {
        return true;
    };
    auto user_list = m_storage->queryUser(filter);
    return user_list;
}

bool AgendaService::createMeeting(const std::string userName, const std::string title,
    const std::string startDate, const std::string endDate,
    const std::vector<std::string> participator) {
    std::function<bool(const User&)> user_filter = [userName](const User& user)->bool {
        return userName == user.getName();
    };
    std::function<bool(const User&)> participator_filter = [participator](const User& user)->bool {
        //return participator == user.getName();
        auto iter = find(participator.begin(), participator.end(), user.getName());
        return iter != participator.end();
    };
    auto user_ = m_storage->queryUser(user_filter);
    auto partcipator_ = m_storage->queryUser(participator_filter);
    if (user_.empty() || partcipator_.empty()) return false; // judge if the username and partcipator exists.

    auto prev = Date::stringToDate(startDate), next = Date::stringToDate(endDate);
    if (!(Date::isValid(prev) && Date::isValid(next)) || (prev > next)) return false; // judge if the date valid.

    std::function<bool(const Meeting&)> title_filter = [title](const Meeting& meeting)->bool {
        return title == meeting.getTitle();
    };
    auto title_ = m_storage->queryMeeting(title_filter);
    if (!title_.empty()) return false;  // judge if the title exists.

    std::function<bool(const Meeting&)> date1_filter = [=](const Meeting& meeting)->bool {
        if (userName == meeting.getSponsor() || participator == meeting.getParticipator()) {
            if (meeting.getEndDate() <= prev || next <= meeting.getStartDate()) return false;
            return true;
        }
        return false;
    };
    std::function<bool(const Meeting&)> date2_filter = [=](const Meeting& meeting)->bool {
        auto iter = find(meeting.getParticipator().begin(), meeting.getParticipator().end(), userName);
        if (iter != meeting.getParticipator().end() || participator == meeting.getParticipator()) {
            if (meeting.getEndDate() <= prev || next <= meeting.getStartDate()) return false;
            return true;
        }
        return false;
    };
    auto time_check_1 = m_storage->queryMeeting(date1_filter), time_check_2 = m_storage->queryMeeting(date2_filter);
    if (time_check_1.empty() && time_check_2.empty()) {
        m_storage->createMeeting(Meeting(userName, participator, prev, next, title));
        return true;
    }
    return false;  // judge if the meeting time is overlap. 
}
std::list<Meeting> AgendaService::meetingQuery(const std::string userName,
    const std::string title) const {
    std::function<bool(const Meeting&)> filter = [=](const Meeting& meeting)->bool {
        auto participator = meeting.getParticipator();
        auto iter = find(participator.begin(), participator.end(), userName);
        if ((userName == meeting.getSponsor() || iter != participator.end()) && title == meeting.getTitle()) return true;
        return false;
    };
    auto query = m_storage->queryMeeting(filter);
    return query;
}
std::list<Meeting> AgendaService::meetingQuery(const std::string userName,
    const std::string startDate,
    const std::string endDate) const {
    auto prev = Date::stringToDate(startDate), next = Date::stringToDate(endDate);
    std::function<bool(const Meeting&)> filter = [=](const Meeting& meeting)->bool {
        auto participator = meeting.getParticipator();
        auto iter = find(participator.begin(), participator.end(), userName);
        if ((userName == meeting.getSponsor() || iter != participator.end()) && (prev <= meeting.getStartDate() && next >= meeting.getEndDate())) return true;
        return false;
    };
    auto query = m_storage->queryMeeting(filter);
    return query;
}
std::list<Meeting> AgendaService::listAllMeetings(const std::string userName) const {
    std::function<bool(const Meeting&)> filter = [=](const Meeting& meeting)->bool {
        auto participator = meeting.getParticipator();
        auto iter = find(participator.begin(), participator.end(), userName);
        if (userName == meeting.getSponsor() || iter != participator.end()) return true;
        return false;
    };
    auto query = m_storage->queryMeeting(filter);
    return query;
}
std::list<Meeting> AgendaService::listAllSponsorMeetings(const std::string userName) const {
    std::function<bool(const Meeting&)> filter = [=](const Meeting& meeting)->bool {
        if (userName == meeting.getSponsor()) return true;
        return false;
    };
    auto query = m_storage->queryMeeting(filter);
    return query;
}
std::list<Meeting> AgendaService::listAllParticipateMeetings(
    const std::string userName) const {
    std::function<bool(const Meeting&)> filter = [=](const Meeting& meeting)->bool {
        auto participator = meeting.getParticipator();
        auto iter = find(participator.begin(), participator.end(), userName);
        if (iter != participator.end()) return true;
        return false;
    };
    auto query = m_storage->queryMeeting(filter);
    return query;
}
bool AgendaService::deleteMeeting(std::string userName, std::string title) {
    std::function<bool(const Meeting&)> filter = [=](const Meeting& meeting)->bool {
        if (userName == meeting.getSponsor() && title == meeting.getTitle()) return true;
        return false;
    };
    auto num = m_storage->deleteMeeting(filter);
    return num != 0;
}
bool AgendaService::deleteAllMeetings(std::string userName) {
    std::function<bool(const Meeting&)> filter = [=](const Meeting& meeting)->bool {
        if (userName == meeting.getSponsor()) return true;
        return false;
    };
    auto num = m_storage->deleteMeeting(filter);
    return num != 0;
}

void AgendaService::startAgenda(void) { m_storage = m_storage->getInstance(); }
void AgendaService::quitAgenda(void) {
    bool temp = m_storage->sync();
}
